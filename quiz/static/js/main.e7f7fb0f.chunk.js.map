{"version":3,"sources":["services.js","context.js","components/Setup.js","helper_functions/decode.js","helper_functions/shuffleAnswers.js","components/QuestionsEnded.js","components/Question.js","reducer.js","App.js","index.js"],"names":["axios","get","then","response","data","amount","category","difficulty","type","token","amountQuery","categoryQuery","difficultyQuery","typeQuery","QuizContext","React","createContext","Setup","fetchQuestions","useContext","state","dispatch","useEffect","payload","categories","className","onClick","e","current","find","id","Number","target","value","map","key","name","diff","numOfQuestions","onChange","max","step","currentCategory","toLowerCase","undefined","escaped_one_to_xml_special_map","decode","string","replace","str","item","shuffleAnswers","array","i","length","j","Math","floor","random","QuestionsEnded","restartQuiz","score","questionCount","round","EPSILON","Question","questions","checkAnswer","correct_answer","allQuestions","shift","question","currentQuestion","allAnswers","incorrect_answers","concat","firstItem","unshift","push","answer","style","marginBottom","display","width","textJustify","drawAnswers","initialState","quizStarted","quizReducer","action","App","useReducer","services","response_code","trivia_categories","Provider","results","window","alert","textAlign","color","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e7f7fb0f.chunk.js","sourcesContent":["import axios from \"axios\"\r\n\r\nconst retrieveToken = () => {\r\n    let request = axios.get(\"https://opentdb.com/api_token.php?command=request\")\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst retrieveCategories = () => {\r\n    let request = axios.get(\"https://opentdb.com/api_category.php\")\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst startQuiz = (amount, category, difficulty, type, token) => {\r\n    let amountQuery = `amount=${amount}`\r\n    let categoryQuery = category !== 404? `&category=${category}` : \"\"\r\n    let difficultyQuery = difficulty !== \"any difficulty\"? `&difficulty=${difficulty}` : \"\"\r\n    let typeQuery = type? `&type=${type}` : \"\"\r\n    let request = axios.get(`https://opentdb.com/api.php?${amountQuery}${categoryQuery}${difficultyQuery}${typeQuery}&token=${token}`)\r\n    return request.then(response => response.data)\r\n\r\n}\r\n\r\nconst resetToken = (token) => {\r\n    let request = axios.get(`https://opentdb.com/api_token.php?command=reset&token=${token}`)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nexport default {\r\n    retrieveToken,\r\n    retrieveCategories,\r\n    startQuiz,\r\n    resetToken\r\n}","import React from \"react\";\r\n\r\nconst QuizContext = React.createContext();\r\n\r\nexport default QuizContext;","import React, {useEffect, useContext} from \"react\"\r\nimport QuizContext from \"../context\"\r\n\r\nconst Setup = ({fetchQuestions}) => {\r\n    const {state, dispatch} = useContext(QuizContext)\r\n\r\n    useEffect(() => {\r\n\r\n        dispatch({type: \"set-current-category\", payload: state.categories[0]})\r\n        // eslint-disable-next-line\r\n    }, [])\r\n\r\n    const selectCategory = (e) => {\r\n\r\n        let current = state.categories.find(category => category.id === Number(e.target.value) )\r\n        \r\n        dispatch({type: \"set-current-category\", payload: current})\r\n\r\n    }\r\n\r\n    const drawCategories = () => {\r\n\r\n        return state.categories ? state.categories.map((category) => {\r\n            return(\r\n                <option value = {category.id} key={category.id?category.id:404}> {category.name} </option>\r\n            )\r\n        }) : \"\"\r\n\r\n    }\r\n\r\n    const selectDifficulty = (e) => {\r\n\r\n        let difficulty = [\"Any Difficulty\", \"Easy\", \"Medium\", \"Hard\"].find(diff => diff === e.target.value)\r\n        dispatch({type: \"set-difficulty\", payload: difficulty})\r\n\r\n    }\r\n\r\n    const drawDifficulties = () => {\r\n\r\n        return [\"Any Difficulty\", \"Easy\", \"Medium\", \"Hard\"].map(diff => <option key={diff} value={diff}> {diff} </option>)\r\n    \r\n    }\r\n\r\n    const selectQuestionAmount = (e) => {\r\n\r\n        return e.target.value <= 50 ? dispatch({type:\"set-number-of-questions\", payload: e.target.value}) : null\r\n    \r\n    }\r\n\r\n    const selectType = (e) => {\r\n\r\n        dispatch({type: \"set-type\", payload: e.target.value})\r\n\r\n    }\r\n\r\n    const drawTypes = () => {\r\n\r\n        let allTypes = [\"Any Type\", \"Multiple Choice\", \"True/False\"]\r\n        return(\r\n            allTypes.map(type => <option key={type} value={type}> {type} </option>)\r\n        )\r\n\r\n    }\r\n\r\n    const startQuiz = () => {\r\n\r\n        let category = state.currentCategory.id;\r\n        let amount = Number(state.numOfQuestions)\r\n        let difficulty = state.difficulty.toLowerCase()\r\n        let type = state.type === \"Any Type\"? undefined : state.type === \"Multiple Choice\"? \"multiple\" : \"boolean\"\r\n        \r\n        fetchQuestions(amount, category, difficulty, type, state.token)\r\n\r\n    }\r\n\r\n    return(\r\n        \r\n        <div className=\"quiz-board\">\r\n            <h4> Select Category </h4>\r\n            <select className=\"category-dropdown\" onClick={selectCategory}>\r\n                {drawCategories()}\r\n            </select>\r\n\r\n            <h4> Select Difficulty </h4>\r\n            <select className=\"difficulty-dropdown\" onClick={selectDifficulty}>\r\n                {drawDifficulties()}\r\n            </select>\r\n            \r\n            <h4> Select Number of Questions </h4>\r\n            <input type=\"number\" value={state.numOfQuestions} onChange={selectQuestionAmount} max=\"50\" step=\"5\"></input> <i>(max: 50)</i>\r\n            \r\n            <h4> Select Questions' Type </h4>\r\n            <select className=\"type-dropdown\" onClick={selectType}>\r\n                {drawTypes()}\r\n            </select>\r\n\r\n            <h4> Ready? </h4>\r\n            <button onClick={startQuiz}>Start</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Setup","var escaped_one_to_xml_special_map = {\r\n    '&amp;': '&',\r\n    '&quot;': '\"',\r\n    '&#039;': '\\'',\r\n    '&ldquo;': '“',\r\n    '&rdquo' : '”',\r\n    '&cent;' : '¢',\r\n    '&pound;' : '£',\r\n    '&sect;' : '§',\r\n    '&copy;' : '©',\r\n    '&laquo;' : '«',\r\n    '&raquo;' : '»',\r\n    '&reg;' : '®',\r\n    '&deg;' : '°',\r\n    '&plusmn;' : '±',\r\n    '&para;' : '¶',\r\n    '&middot;' : '·',\r\n    '&frac12' : '½',\r\n    '&ndash;' : '–',\r\n    '&mdash;' : '—',\r\n    '&sbquo;' : '‚',\r\n    '&lsquo' : '‘',\r\n    '&rsquo;' : '’',\r\n    '&bdquo;' : '„',\r\n    '&dagger;' : '†',\r\n    '&Dagger;' : '‡',\r\n    '&bull;' : '•',\r\n    '&hellip;' : '…',\r\n    '&prime;' : '′',\r\n    '&Prime;' : '″',\r\n    '&euro;' : '€',\r\n    '&trade;' : '™',\r\n    '&asymp;' : '≈',\r\n    '&ne;' : '≠',\r\n    '&le;' : '≤',\r\n    '&ge;' : '≥',\r\n    '&lt;' : '<',\r\n    '&gt;' : '>'\r\n};\r\n\r\n\r\nfunction decode(string) {\r\n    return string.replace(/(&quot;|&lt;|&gt;|&amp;|&#039;|&lqduo|&rqduo|&cent;|&pound;|&sect;|&copy;|&laquo;|&raquo;|&reg;|&deg;|&plusmn;|&para;|&middot;|&frac12;|&ndash;|&mdash;|&sbquo;|&lsquo;|&rsquo;|&bdquo;|&dagger;|&Dagger;|&bull;|&hrllip;|&prime;|&Prime;|&euro;|&trade;|&ne;|&le;|&ge;|&lt;|&gt;)/g,\r\n        function(str, item) {\r\n            return escaped_one_to_xml_special_map[item];\r\n    });\r\n}\r\n\r\nexport default decode","const shuffleAnswers = (array) => {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1));\r\n        [array[i], array[j]] = [array[j], array[i]];\r\n    }\r\n    return array\r\n}\r\n\r\nexport default shuffleAnswers\r\n","import React, { useContext } from \"react\";\r\n\r\nimport QuizContext from \"../context\";\r\n\r\nexport const QuestionsEnded = ({restartQuiz}) => {\r\n    const { state } = useContext(QuizContext);\r\n\r\n    const returnFinalScore =  () => {\r\n        return `${state.score}/${state.questionCount}`\r\n    }\r\n\r\n    const returnFinalPercent = () => {\r\n        return `${(Math.round((state.score / state.questionCount + Number.EPSILON) *100) /100) * 100}%`\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h4>Quiz Ended</h4>\r\n            <h4>Your Score: {returnFinalScore()}</h4>\r\n            <h4>Percentage: {returnFinalPercent()}</h4>\r\n            <button onClick={() => restartQuiz()}> restart </button>\r\n        </div>\r\n    );\r\n};\r\n","import React, { useEffect, useContext } from \"react\";\r\nimport QuizContext from \"../context\";\r\n\r\nimport decode from \"../helper_functions/decode\";\r\nimport shuffleAnswers from \"../helper_functions/shuffleAnswers\";\r\n\r\nimport { QuestionsEnded } from \"./QuestionsEnded\";\r\nconst Question = ({restartQuiz}) => {\r\n    const { state, dispatch } = useContext(QuizContext);\r\n\r\n    useEffect(\r\n        () =>\r\n            dispatch({\r\n                type: \"set-questions-count\",\r\n                payload: state.questions.length,\r\n            }),\r\n            // eslint-disable-next-line\r\n        []\r\n    );\r\n\r\n    const drawAnswers = () => {\r\n        let currentQuestion = state.questions[0];\r\n        let allAnswers = currentQuestion.incorrect_answers.concat(\r\n            currentQuestion.correct_answer\r\n        );\r\n\r\n        if (currentQuestion.type === \"multiple\") {\r\n            allAnswers = shuffleAnswers(allAnswers);\r\n        } else {\r\n            let firstItem = allAnswers.shift();\r\n            if (firstItem === \"True\") allAnswers.unshift(firstItem);\r\n            else allAnswers.push(firstItem);\r\n        }\r\n\r\n        return allAnswers.map((answer, i) => {\r\n            return (\r\n                <div key={i} style={{ marginBottom: \"5px\" }}>\r\n                    <span style={{ display: \"inline-block\", width: \"20px\" }}>\r\n                        {[\"a.\", \"b.\", \"c.\", \"d.\"][i]}\r\n                    </span>\r\n                    <button\r\n                        style={{ display: \"inline-block\", textJustify: \"\" }}\r\n                        onClick={checkAnswer}\r\n                        value={answer}\r\n                        key={i}\r\n                    >\r\n                        {decode(answer)}\r\n                    </button>\r\n                </div>\r\n            );\r\n        });\r\n    };\r\n\r\n    const checkAnswer = (e) => {\r\n        if (e.target.value === state.questions[0].correct_answer) {\r\n            dispatch({ type: \"set-score\", payload: state.score + 1 });\r\n\r\n            let allQuestions = [...state.questions];\r\n            allQuestions.shift();\r\n\r\n            dispatch({ type: \"set-questions\", payload: allQuestions });\r\n        } else {\r\n            let allQuestions = [...state.questions];\r\n\r\n            allQuestions.shift();\r\n            \r\n            dispatch({ type: \"set-questions\", payload: allQuestions });\r\n        }\r\n    };\r\n\r\n    const drawQuestion = () => {\r\n        return state.questions.length > 0 ? (\r\n            <div className=\"single-question\">\r\n                <h4>\r\n                    Question {state.questionCount - state.questions.length + 1}/\r\n                    {state.questionCount}\r\n                </h4>\r\n                <p> {decode(state.questions[0].question)} </p>\r\n\r\n                {drawAnswers()}\r\n            </div>\r\n        ) : <QuestionsEnded restartQuiz={restartQuiz} />\r\n    };\r\n\r\n    return <div className=\"question\">{drawQuestion()}</div>;\r\n};\r\n\r\nexport default Question;\r\n","export const initialState = {\r\n    token: null,\r\n    categories: [],\r\n    questions: [],\r\n    currentCategory: {\r\n        id: 404,\r\n        name: null\r\n    },\r\n    difficulty: \"Any Difficulty\",\r\n    numOfQuestions: 10,\r\n    type: \"Any Type\",\r\n    score: 0,\r\n    questionCount: 0,\r\n    quizStarted: false\r\n}\r\n\r\nexport const quizReducer = (state, action) => {\r\n    switch(action.type){\r\n        case 'set-token':\r\n            return {...state,\r\n            token: action.payload}\r\n        case 'set-categories':\r\n            return {...state,\r\n            categories: action.payload}\r\n        case 'set-questions':\r\n            return {...state,\r\n            questions: action.payload}\r\n        case 'set-current-category':\r\n            return {...state,\r\n            currentCategory: action.payload}\r\n        case 'set-difficulty':\r\n            return {...state,\r\n            difficulty: action.payload}\r\n        case 'set-number-of-questions':\r\n            return {...state,\r\n            numOfQuestions: action.payload}\r\n        case 'set-type':\r\n            return {...state,\r\n            type: action.payload}\r\n        case 'set-questions-count':\r\n            return {...state,\r\n            questionCount: action.payload}\r\n        case 'set-score':\r\n            return {...state,\r\n            score: action.payload}\r\n        case 'set-quiz-started':\r\n            return {...state,\r\n            score:0,\r\n            quizStarted: action.payload}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n","import React, {useEffect, useReducer} from 'react';\nimport services from \"./services\"\nimport Setup from \"./components/Setup\"\nimport Question from \"./components/Question\"\nimport { quizReducer, initialState } from \"./reducer\";\nimport QuizContext from \"./context\"\n\n\nfunction App() {\n  const [state, dispatch] = useReducer(quizReducer, initialState)\n\n  useEffect(() => {\n\n    services.retrieveToken()\n    .then(response => {\n      if(response.response_code === 0){\n\n        dispatch({type: \"set-token\", payload: response.token})\n\n      }\n    })\n    \n  }, [])\n\n\n  useEffect(() => {\n\n    services.retrieveCategories()\n    .then(response => {\n\n      response.trivia_categories.unshift({id: 404, name: \"Any Category\"})\n      dispatch({type: \"set-categories\", payload: response.trivia_categories})\n\n    })\n\n  }, [])\n\n  const fetchQuestions = (amount,category,difficulty,type, token) => {\n    services.startQuiz(amount, category, difficulty, type, token)\n      .then(response => {\n\n          if(response.response_code === 0){\n\n            dispatch({type: \"set-questions\", payload: response.results})\n            dispatch({type:\"set-quiz-started\", payload: true })\n\n          } else if(response.response_code === 4 || response.response_code === 1){\n\n            window.alert(\"No questions found with current parameters\")\n            /*რესპონს კოდი 4 სხვა რაღაცა როა ვიცი, მაგრამ რესპონს კოდი 1 არასდროს დაუბრუნებია აპის და მაგიტომ გავაერთიანე*/ \n          \n          }\n          \n      }) \n}\n\nconst restartQuiz = () => {\n\n  dispatch({type: \"set-quiz-started\", payload: false});\n  dispatch({type: \"set-categories\", payload: [] });\n  dispatch({type: \"set-questions\", payload: [] });\n  \n  services.retrieveCategories()\n  .then(response => {\n\n    response.trivia_categories.unshift({id: 404, name: \"Any Category\"})\n    dispatch({type: \"set-categories\", payload: response.trivia_categories})\n\n  })\n}\n\n  return (\n    <QuizContext.Provider value={{state, dispatch}}>\n    <div className=\"App\">\n\n      {state.categories.length === 0 ? <div className=\"spin-wrapper\"><i className=\"spinner\"></i>loading...</div> : state.questions.length === 0 && state.quizStarted === false? <Setup fetchQuestions={fetchQuestions} /> : <Question restartQuiz={restartQuiz} />}\n      \n    </div>\n    <p style={{textAlign:\"center\",color:\"white\"}}>by Sandro Tsereteli</p>\n    </QuizContext.Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport \"./index.css\"\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}